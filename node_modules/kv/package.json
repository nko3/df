{
  "name": "kv",
  "version": "1.0.5",
  "description": "an append oriented kv store for streams",
  "homepage": "http://github.com/dominictarr/kv",
  "repository": {
    "type": "git",
    "url": "https://github.com/dominictarr/kv.git"
  },
  "dependencies": {
    "optimist": "~0.3.4",
    "event-stream": "~3.0.7",
    "mkdirp": "~0.3.4"
  },
  "bin": {
    "kv": "./cli.js"
  },
  "devDependencies": {
    "rimraf": "~2.0.2"
  },
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "dominictarr.com"
  },
  "browserify": "./client.js",
  "readme": "# kv-stream\n\nsuper simple key-value store, intended for keeping appendable files.\n\nworks on the server, with files, _and in the browser_ with `localStorage`.\n\non the server, it keeps the files in prefixed subdirectories, so that the directories do not get too large.\n\n(see ls .git/objects/\\* for a similar example)\n\n## examples\n\n###create an instance\n\n`setup` is optional. `setup` is passed the stream created by `put` and `get`, may replace the stream passed to put/get\nby default, the stream is handled as newline seperated json.\n\n```\n//server\nvar kv = require('kv')('/tmp/kv')\n//client\nvar kv = require('kv')('kv:') //this will be prefixed to keys when saving in localStorage.\n```\n\n\n### put a stream\n\n`opts` is optional. see [fs.createWriteStream](http://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options)\n\n``` js\nstream.pipe(kv.put(key, opts))\n```\n\n`kv.createWriteStream` is a synonym for `kv.put`\n\n### get a stream\n\n`opts` is optional. see [fs.createReadStream](http://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options)\n\n``` js\nkv.get(key, opts).pipe(stream) \n```\n`kv.createReadStream` is a synonym for `kv.get`\n\n### del a stream\n\n``` js\nkv.del(key, callback)\n```\n\n### list of keys\n\n``` js\nkv.list().pipe(stream)\n\n```\n\n### has\n\ncheck if db has a key\n\n``` js\n  kv.has(key, function (err, stat) {\n    //return the stat of the stream, if it exists.\n  })\n\n```\n\n### customization\n\nto handle other types of streams than newline separated json, pass in a stream setup function to kv.\n\n``` js\nvar rawKV = require('kv')(dir, function (stream, key) {\n  return stream //just use raw streams, do not parse!\n})\n```\n\n# cli\n\nthere is also a cli tool!\n\n```\nnpm install kv -g\n\necho hello | kv put hello --base /tmp/kv\nkv get hello --base /tmp/k\n\n```\n",
  "_id": "kv@1.0.5",
  "_from": "kv"
}
